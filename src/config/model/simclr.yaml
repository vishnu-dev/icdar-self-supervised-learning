name: simclr
classname: SimCLR

learning_rate: 0.0015

params:
  gpus: -1

augmentations:

  train:
    
    # Random resized crop
    - _target_: torchvision.transforms.RandomResizedCrop
      size: 224
    
    # Horizontal flip
    - _target_: torchvision.transforms.RandomHorizontalFlip
      p: 0.5
    
    # Random Color Jitter
    - _target_: torchvision.transforms.RandomApply
      transforms:
        - _target_: torchvision.transforms.ColorJitter
          brightness: 0.8
          contrast: 0.8
          saturation: 0.8
          hue: 0.2
      p: 0.8
    
    # Random gaussian blur
    - _target_: torchvision.transforms.RandomApply
      transforms:
        - _target_: torchvision.transforms.GaussianBlur
          kernel_size: 23
      p: 0.5
    
    # Random rotation
    - _target_: torchvision.transforms.RandomApply
      transforms:
        - _target_: torchvision.transforms.RandomRotation
          degrees:
            - -25
            - 25
      p: 0.5

    # Convert to tensor
    - _target_: torchvision.transforms.ToTensor
    
    # Random erasing
    - _target_: torchvision.transforms.RandomErasing
      p: 0.5
    
    # Random dilation
    - _target_: torchvision.transforms.RandomApply
      transforms:
        - _target_: data.augment.Dilation
          kernel_size: 5
      p: 0.5
    
    # Random erosion
    - _target_: torchvision.transforms.RandomApply
      transforms:
        - _target_: data.augment.Erosion
          kernel_size: 3
      p: 0.5

    # Normalization
    - _target_: torchvision.transforms.Normalize
      mean: ${dataset.mean}
      std: ${dataset.std}

  online:

    - _target_: torchvision.transforms.RandomResizedCrop
      size: 224
    
    # Horizontal flip
    - _target_: torchvision.transforms.RandomHorizontalFlip
      p: 0.5
    
    # Convert to tensor
    - _target_: torchvision.transforms.ToTensor

    # Normalization
    - _target_: torchvision.transforms.Normalize
      mean: ${dataset.mean}
      std: ${dataset.std}